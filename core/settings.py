"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os

from pathlib import Path
from dotenv import load_dotenv

# Загрузка переменных окружения из .env файла
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-=*k&zk_*f_9%k7+4z0(1eh1^1&!to*tonwj2cf%x1mf76jmd3w"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

ALLOWED_HOSTS = [
    "shop_service",
    "web",
    "pimenov.kz",
    "localhost",
    "127.0.0.1",
    "185.100.67.246",
]


# Application definition
""
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # my adding apps
    "rest_framework",
    "corsheaders",
    "mptt",
    "django_mptt_admin",
    "flat_json_widget",
    "rest_framework_simplejwt",
    "django_celery_results",
    "django_celery_beat",
    "django_elasticsearch_dsl",
    # приложения
    "app_products",
    "app_category",
    "app_manage_banners",
    "app_brands",
    "app_specifications",
    "app_descriptions",
    "app_sales_points",
    "app_manager_tags",
    "app_blogs",
    "app_reviews",
    "app_discounts",
    "app_services",
    "app_kaspi",  # приложение без регистрации в админке
    "app_elastic",  # приложение без регистрации в админке
    "app_orders",
    # для работы с изображениями
    "easy_thumbnails",  # TODO no use
    "image_cropping",  # TODO no use
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "core/templates"),
            os.path.join(BASE_DIR, "app_orders/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {  # Запущена в контейнере
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DATABASE_NAME_DEFAULT"),
        "USER": os.getenv("DATABASE_USER_DEFAULT"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD_DEFAULT"),
        "HOST": os.getenv("DATABASE_HOST_DEFAULT"),
        "PORT": os.getenv("DATABASE_PORT_DEFAULT"),
    },
    "fastapi_db": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DATABASE_NAME_BASKET"),
        "USER": os.getenv("DATABASE_USER_BASKET"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD_BASKET"),
        "HOST": os.getenv("DATABASE_HOST_BASKET"),
        "PORT": os.getenv("DATABASE_PORT_BASKET"),
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ==============================MY ADDING======================================
LANG_EN = "EN"
LANG_KZ = "KZ"

MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

TIME_ZONE = "Asia/Almaty"
USE_TZ = True

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 1,
}

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    "https://pimenov.kz",
]
CORS_ALLOWED_ORIGINS = [
    "https://pimenov.kz",
]
CSRF_COOKIE_SECURE = True

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

SIMPLE_JWT = {
    "ALGORITHM": "RS256",
    "VERIFYING_KEY": open(os.path.join(BASE_DIR, "certs", "public.pem")).read(),
}

# REDIS CACHE
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("LOCATION"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

ELASTICSEARCH_DSL = {
    "default": {
        "hosts": os.getenv("HOST"),
        "timeout": 30,  # Увеличьте время ожидания, например, до 30 секунд
        "retry_on_timeout": True,  # Включите повторную попытку при тайм-ауте
        "max_retries": 3,  # Установите количество повторных попыток
        # "http_auth": ("elastic", "YOUR_PASSWORD"),
        # "ca_certs": "PATH_TO_http_ca.crt",
    }
}


BASE_URL_ETL_1C = os.getenv("BASE_URL_ETL_1C")
BASE_URL_API_SELF = os.getenv("BASE_URL_API_SELF")
BROKER_URL = os.getenv("BROKER_URL")


# фоновые для каспи
ORDERS_API = os.getenv("ORDERS_API")
ETL_SERVICE_GET_ARCHIVE_ORDERS_KASPI = os.getenv("ETL_SERVICE_GET_ARCHIVE_ORDERS_KASPI")

DATABASE_ROUTERS = ["app_orders.FastAPIDatabaseRouter.FastAPIDatabaseRouter"]

# это общение с сервисом корзины
BASKET_HOST = os.getenv("BASKET_HOST")
BASKET_PORT = os.getenv("BASKET_PORT")
API_URL_GET_ORDERS = "http://{basket_host}:{basket_port}/basket_api/v1/order/all/?page={page}&size={size}"
API_URL_GET_INFO_ORDER_WITH_BASKET = (
    "http://{basket_host}:{basket_port}/basket_api/v1/order/info_with_basket/{uuid_id}/"
)
API_URL_UPDATE_ORDER = (
    "http://{basket_host}:{basket_port}/basket_api/v1/order/{uuid_id}/"
)
API_URL_GET_ARCHIVE_ORDERS_MANAGER = "http://{basket_host}:{basket_port}/basket_api/v1/order/get_manager_order_archive/{id_manager}/?page={page}&size={size}"
API_URL_BASKET_ITEM_UPDATE = (
    "http://basket_service:8777/basket_api/v1/bascket/{uuid_id}/{prod_id}/"
)
